/*
	Before using on Switch, make sure wired USB connection is enabled in System Settings.
	TO DO

	Enable REQUIRETOUCHGYRO by using TRUE to only broadcast gyro if the pad is touched.
	ADAPTIVEJOYSTICK is a way to send stick output from anywhere on the pad, instead of its absolute position.
	For OUTDEAD defines, choose the smallest value that the touchpads can read out of all diagonal directions.
*/

#pragma METAINFO("Steam Controller Switch", 1, 0, "DaMu")
/*
<cfgdesc>
[unique section name]
control = value
shortdesc = description
byteoffset = value
bitsize = value
bitoffset = value
default = value
item = value
minimum = value
maximum = value
step = value
</cfgdesc>
*/
#include <display.gph>
#include <switch.gph>
#include <steam.gph>

#define SEGTIME				1500
#define SEGMAX				5

#define DELTATIME			16.0

#define TOUCHTHRESH			45.0
#define DECAY						0.05
#define SWIPESCALE			0.84
#define POLLINGNO				215

#define SWIPEDECAY			TRUE
#define SWIPETRACK			TRUE
#define REQUIRETOUCHGYRO	FALSE
#define ADAPTIVEJOYSTICK TRUE

#define DEADZONE_L_X		6.6
#define DEADZONE_L_Y    	6.6
#define RADIAL_DEADZONE_L  5.6
#define DEADZONE_R_X    	30.0
#define DEADZONE_R_Y    	30.0
#define DEADZONE_D			1.0
#define MINLEFT_X			15.0
#define MINLEFT_Y			15.0
#define OUTDEAD_L_X			57.5
#define OUTDEAD_L_Y			57.5
#define gyroMultiply		2.0
#define leftLeanPoint		-18.0

 
bool leftPress;
//lean left to click Left Stick. LSC defaults to Right Stick Click.
bool leanLeft;
bool rightPress;

uint8 status_a, status_b, protocol_a, protocol_b, device_a, device_b;
uint8 seg = 0;

fix32 trackBuf_strt, trackBuf_new, trackBuf_release, trackBuf_diff, rightTimePress;

uint8 segDis () {
	status_a = port_status(PORT_USB_A, &protocol_a, &device_a);
	status_b = port_status(PORT_USB_B, &protocol_b, &device_b);
	if((status_a & DIR_INPUT) && (protocol_a == PROTOCOL_STEAM)) {
		printf("%u", device_a);
		return(_S_);
}
	return(_N_);
}

uint8 segDisRepeat (uint8 i) {
	status_a = port_status(PORT_USB_A, &protocol_a, &device_b);
	status_b = port_status(PORT_USB_B, &protocol_b, &device_b);
	const uint8 steamName[5] = {
		_S_, _T_, _E_, _A_, _M_
	},
	noController[5] = {
		_N_, _O_, _C_, _O_, _R_
	};
	if((status_a & DIR_INPUT) && (protocol_a == PROTOCOL_STEAM)) {
		return(steamName[i]);
	}
	return(noController[i]);
}

init {
//	device_poweroff();
	display_overlay(segDis(), SEGTIME);
	trackBuf_strt =  0.0;
	trackBuf_release =  0.0;
	trackBuf_new =  0.0;
	rightTimePress = 0.0;
	trackBuf_diff =  trackBuf_release - trackBuf_strt;
}


main {
	if(mod((fix32)system_time(), (fix32)SEGTIME) == 0.0) {
		display_overlay(segDisRepeat(seg), SEGTIME);
		seg++;
		if(seg >= SEGMAX) {
			seg = 0;
		}
	}
//is left pad being touched?
	leftPress = isLeftPress();
		//	
//least required touch distance for maximum output
	fixLeftTrackpad(leftPress);
	//set_val(SWITCH_LX, solvex);
	//set_val(SWITCH_LY, solvey);
//	use right pad to swipe and turn
	if(ADAPTIVEJOYSTICK) {
		trackBuf_diff = getAdaptiveStick();
	} else {
		rightPress = isRightPress();
	}
	set_val(SWITCH_RX, trackBuf_diff);
	SteamLeftStick();

//left track pad overrides stick
//Steam gyro is 1/2 Switch's
	buffGyro(REQUIRETOUCHGYRO);
	leanLeft = (get_val(STEAM_ACCX) < leftLeanPoint) ? TRUE : FALSE;
	extraButtons(leanLeft);
}

//If touching left pad, move left stick. Reset to center on release.
bool isLeftPress(){
	if (get_actual(STEAM_TOUCHL) < TOUCHTHRESH){
		set_val(SWITCH_LX, 0);
		set_val(SWITCH_LY, 0);
		return(FALSE);
	}
	return(TRUE);
}

bool isRightPress(){
	if (get_val(STEAM_TOUCHR) < TOUCHTHRESH){
//Not touching right pad resets right stick output.
		//ffb_reset();
		set_val(SWITCH_RX, 0);
		set_val(SWITCH_RY, 0);
		return(FALSE);
	}
	return (TRUE);
}

void SteamLeftStick() {
	if (abs(get_actual(STEAM_STICKX)) > TOUCHTHRESH || abs(get_actual(STEAM_STICKY)) > TOUCHTHRESH ){
	set_val(SWITCH_RX, get_actual(STEAM_STICKX));
	set_val(SWITCH_RY, get_actual(STEAM_STICKY));
	}
}

void fixLeftTrackpad(bool left){
	fix32 potential;
	if (left){
		if((get_actual(STEAM_TOUCH_LX) > RADIAL_DEADZONE_L) || (get_actual(STEAM_TOUCH_LX) < inv(RADIAL_DEADZONE_L)) ) {
			fix32 solvex;
			if((get_actual(STEAM_TOUCH_LY) < DEADZONE_L_Y) || (get_actual(STEAM_TOUCH_LY) > inv(DEADZONE_L_Y))) {
				//ignore Y if there is no Y input
				if(get_actual(STEAM_TOUCH_LX) < 0.0) {
					solvex = max(-100.0, (fix32)((get_actual(STEAM_TOUCH_LX) + DEADZONE_L_X) * 100.0 / OUTDEAD_L_X));
				}
				if(get_actual(STEAM_TOUCH_LX) > 0.0) {
					solvex = min(100.0, (fix32)((get_actual(STEAM_TOUCH_LX) - DEADZONE_L_X) * 100.0 / OUTDEAD_L_X));
				}
			} else {
					potential = 100.0 * sqrt(pow(get_actual(STEAM_TOUCH_LX),2.0) + pow(get_actual(STEAM_TOUCH_LY),2.0)) / (OUTDEAD_L_X - DEADZONE_L_X);
					solvex = cos(atan2(get_actual(STEAM_TOUCH_LY), get_actual(STEAM_TOUCH_LX))) * potential;
			}
			set_val(SWITCH_LX, solvex);
		}
		if((get_actual(STEAM_TOUCH_LY) > RADIAL_DEADZONE_L) || (get_actual(STEAM_TOUCH_LY) < inv(RADIAL_DEADZONE_L)) ) {
			fix32 solvey;
			if((get_actual(STEAM_TOUCH_LX) < DEADZONE_L_X) || (get_actual(STEAM_TOUCH_LX) > inv(DEADZONE_L_X))) {
				//ignore X if there is no X input
				if(get_actual(STEAM_TOUCH_LY) < 0.0) {
					solvey = max(-100.0, (fix32)((get_actual(STEAM_TOUCH_LY) + DEADZONE_L_Y) * 100.0 / OUTDEAD_L_Y));
				}
				else {
					solvey = min(100.0, (fix32)((get_actual(STEAM_TOUCH_LY) - DEADZONE_L_Y) * 100.0 / OUTDEAD_L_Y));
				}
			} else {
				potential = 100.0 * sqrt(pow(get_actual(STEAM_TOUCH_LX),2.0) + pow(get_actual(STEAM_TOUCH_LY),2.0)) / (OUTDEAD_L_Y - DEADZONE_L_Y);
				solvey = sin(atan2(get_actual(STEAM_TOUCH_LY), get_actual(STEAM_TOUCH_LX))) * potential;
			}
			set_val(SWITCH_LY, solvey);
		}
	}
}

void buffGyro(bool isTouchGyro){
	if(isTouchGyro){
		set_val(SWITCH_GYROZ, (get_actual(STEAM_TOUCHR) > TOUCHTHRESH) ? get_val(STEAM_GYROZ) * gyroMultiply : 0.0);
		set_val(SWITCH_GYROY, (get_actual(STEAM_TOUCHR) > TOUCHTHRESH) ? get_val(STEAM_GYROY) * gyroMultiply : 0.0);
	} else {
		set_val(SWITCH_GYROZ, get_val(STEAM_GYROZ) * gyroMultiply);
		set_val(SWITCH_GYROY, get_val(STEAM_GYROY) * gyroMultiply);
	}
}

void extraButtons(bool leanLeft) {
	//left Paddle is Accept
	if(get_val(STEAM_PADDLE_L)){
		set_val(SWITCH_A, 100.0);
	}
	//right Paddle is Jump
	if(get_val(STEAM_PADDLE_R)){
		set_val(SWITCH_B, 100.0);
	}
	//right Pad is Jump
	if(get_val(STEAM_RTP)){
		set_val(SWITCH_RS, 0.0);
		set_val(SWITCH_B, 100.0);
	}
	//when in normal position, Stick Click is Right Stick Click
	if(get_val(STEAM_STICK_CLICK) && !leanLeft) {
		set_val(SWITCH_LS, 0.0);
		set_val(SWITCH_RS, 100.0);
	}
	//lean left and press Steam button for Capture
	if(get_val(STEAM_HOME) && leanLeft) {
		set_val(SWITCH_HOME, 0.0);
		set_val(SWITCH_CAPTURE, 100.0);
	}
	
	/*
	//Convert stick to D-Pad
	if (leanLeft) {
		if (abs(get_actual(STEAM_STICKX)) > TOUCHTHRESH || abs(get_actual(STEAM_STICKY)) > TOUCHTHRESH ){
			set_val(SWITCH_UP, 100.0));
			set_val(SWITCH_DOWN, 100.0);
			set_val(SWITCH_LEFT, 100.0);
			set_val(SWITCH_RIGHT, 100.0);
		}
	}
	*/
}

void swipeDecayZero() {
	/*
	if(is_release(STEAM_TOUCHR)){
		if(SWIPETRACK){
			if(SWIPEDECAY) {
				trackBuf_diff = (trackBuf_diff > 0.0) ? trackBuf_diff - DECAY : trackBuf_diff + DECAY;
			}
		} else {
			trackBuf_diff = 0.0;
		}
	}
 */
}

fix32 getAdaptiveStick() {
	if (event_active(STEAM_TOUCHR)) {
		trackBuf_strt = get_actual(STEAM_TOUCH_RX);
		printf("right Press");
		return(0.0);
	}
	if(is_active(STEAM_TOUCHR)) {
		trackBuf_new = get_actual(STEAM_TOUCH_RX);
		printf("%.1f - %.1f", trackBuf_new, trackBuf_strt);
		trackBuf_diff = (trackBuf_new - trackBuf_strt) * SWIPESCALE;
	}
	if (event_release(STEAM_TOUCHR)) {
		printf("release right");
		return(0.0);
	}
	return(clamp(trackBuf_diff, -100.0, 100.0));
}